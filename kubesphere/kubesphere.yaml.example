apiVersion: kubekey.kubesphere.io/v1alpha2
kind: Cluster
metadata:
  name: sample
spec:
  hosts: # Change me
  - {name: kube-master-1, address: 1.2.3.4, internalAddress: 1.2.3.4, user: redos, privateKeyPath: ".ssh/eddsa.key"}
  - {name: kube-worker-1, address: 1.2.3.4, internalAddress: 1.2.3.4, user: redos, privateKeyPath: ".ssh/eddsa.key"}
  roleGroups: # Change me
    etcd:
    - kube-master-1
    control-plane:
    - kube-master-1
    worker:
    - kube-worker-1
  controlPlaneEndpoint:
    #internalLoadbalancer: kube-vip
    externalDNS: true
    domain: apiserver.example.com # Change me
    address: 1.2.3.4  # Change me
    port: 6443
  system:
    ntpServers:
      - 0.ru.pool.ntp.org
      - 1.ru.pool.ntp.org
      - 2.ru.pool.ntp.org
      - 3.ru.pool.ntp.org
    timezone: "Europe/Moscow"
    rpms:
      - nfs-utils
    skipConfigureOS: false
  kubernetes:
    version: v1.26.15
    clusterName: cluster.local
    autoRenewCerts: true
    containerManager: containerd
  etcd:
    type: kubekey
  network:
    plugin: calico
    kubePodsCIDR: 10.233.64.0/18
    kubeServiceCIDR: 10.233.0.0/18
  registry:
    privateRegistry: ""
    namespaceOverride: ""
    registryMirrors: []
    insecureRegistries: []
  addons:
    - name: cert-manager
      namespace: cert-manager
      sources:
        chart:
          name: cert-manager
          repo: https://charts.jetstack.io
          values:
            - crds.enabled=true
            - prometheus.enabled=true
            - prometheus.servicemonitor.enabled=true
        yaml:
          path:
            - kubesphere/addons/cert-manager-issuers.yaml
    - name: jaeger-operator
      namespace: istio-system
      sources:
        chart:
          name: jaeger-operator
          repo: https://jaegertracing.github.io/helm-charts
          values:
            - image.tag=1.38.1 # Fix API kinds to match Kubernetes 1.26'
            - rbac.clusterRole=true
            - rbac.create=true # Fix 'cannot list namespaces'
            - rbac.pspEnabled=false
            - resources.limits.cpu=100m
            - resources.limits.memory=128Mi
            - resources.requests.cpu=20m
            - resources.requests.memory=50Mi
            - serviceAccount.create=true
            - webhooks.mutatingWebhook.create=false
            - webhooks.validatingWebhook.create=false
    # - name: nfs-subdir-external-provisioner
    #   namespace: kube-system
    #   sources:
    #     chart:
    #       name: nfs-subdir-external-provisioner
    #       repo: https://kubernetes-sigs.github.io/nfs-subdir-external-provisioner/
    #       values:
    #         - nfs.server=192.168.1.17
    #         - nfs.path=/mnt/nfs
---
apiVersion: installer.kubesphere.io/v1alpha1
kind: ClusterConfiguration
metadata:
  name: ks-installer
  namespace: kubesphere-system
  labels:
    version: v3.4.1
spec:
  persistence:
    storageClass: ""
  authentication:
    jwtSecret: ""
  local_registry: ""
  # dev_tag: ""
  etcd:
    monitoring: true
    endpointIps: localhost
    port: 2379
    tlsEnable: true
  common:
    core:
      console:
        enableMultiLogin: true
        port: 30880
        type: NodePort
    # apiserver:
    #  resources: {}
    # controllerManager:
    #  resources: {}
    redis:
      enabled: false
      enableHA: false
      volumeSize: 2Gi
    openldap:
      enabled: false
      volumeSize: 2Gi
    minio:
      volumeSize: 20Gi
    monitoring:
      # type: external
      endpoint: http://prometheus-operated.kubesphere-monitoring-system.svc:9090
      GPUMonitoring:
        enabled: false
    gpu:
      kinds:
      - resourceName: "nvidia.com/gpu"
        resourceType: "GPU"
        default: true
    es:
      # master:
      #   volumeSize: 4Gi
      #   replicas: 1
      #   resources: {}
      # data:
      #   volumeSize: 20Gi
      #   replicas: 1
      #   resources: {}
      enabled: false
      logMaxAge: 7
      elkPrefix: logstash
      basicAuth:
        enabled: false
        username: ""
        password: ""
      externalElasticsearchHost: ""
      externalElasticsearchPort: ""
    opensearch:
      # master:
      #   volumeSize: 4Gi
      #   replicas: 1
      #   resources: {}
      # data:
      #   volumeSize: 20Gi
      #   replicas: 1
      #   resources: {}
      enabled: true
      logMaxAge: 7
      opensearchPrefix: whizard
      basicAuth:
        enabled: true
        username: "admin"
        password: "admin"
      externalOpensearchHost: ""
      externalOpensearchPort: ""
      dashboard:
        enabled: false
  alerting:
    enabled: true
    # thanosruler:
    #   replicas: 1
    #   resources: {}
  auditing:
    enabled: false
    # operator:
    #   resources: {}
    # webhook:
    #   resources: {}
  devops:
    enabled: false
    jenkinsCpuReq: 0.5
    jenkinsCpuLim: 1
    jenkinsMemoryReq: 4Gi
    jenkinsMemoryLim: 4Gi
    jenkinsVolumeSize: 16Gi
  events:
    enabled: false
    # operator:
    #   resources: {}
    # exporter:
    #   resources: {}
    ruler:
      enabled: true
      replicas: 2
    #   resources: {}
  logging:
    enabled: true
    logsidecar:
      enabled: true
      replicas: 2
      # resources: {}
  metrics_server:
    enabled: true
  monitoring:
    storageClass: ""
    node_exporter:
      port: 9100
      # resources: {}
    # kube_rbac_proxy:
    #   resources: {}
    # kube_state_metrics:
    #   resources: {}
    # prometheus:
    #   replicas: 1
    #   volumeSize: 20Gi
    #   resources: {}
    #   operator:
    #     resources: {}
    # alertmanager:
    #   replicas: 1
    #   resources: {}
    # notification_manager:
    #   resources: {}
    #   operator:
    #     resources: {}
    #   proxy:
    #     resources: {}
    gpu:
      nvidia_dcgm_exporter:
        enabled: false
        # resources: {}
  multicluster:
    clusterRole: none
  network:
    networkpolicy:
      enabled: true
    ippool:
      type: calico
    topology:
      type: none
  openpitrix:
    store:
      enabled: false
  servicemesh:
    enabled: true
    istio:
      components:
        ingressGateways:
        - name: istio-ingressgateway
          enabled: false
        cni:
          enabled: false
  edgeruntime:
    enabled: false
    kubeedge:
      enabled: false
      cloudCore:
        cloudHub:
          advertiseAddress:
            - ""
        service:
          cloudhubNodePort: "30000"
          cloudhubQuicNodePort: "30001"
          cloudhubHttpsNodePort: "30002"
          cloudstreamNodePort: "30003"
          tunnelNodePort: "30004"
        # resources: {}
        # hostNetWork: false
      iptables-manager:
        enabled: true
        mode: "external"
        # resources: {}
      # edgeService:
      #   resources: {}
  gatekeeper:
    enabled: false
    # controller_manager:
    #   resources: {}
    # audit:
    #   resources: {}
  terminal:
    timeout: 600
